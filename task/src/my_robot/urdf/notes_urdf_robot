We have a single link, with the name defined as "chassis", encompassing the base as well as the caster wheels. Every link has specific elements, such as the inertial or the collision elements. Review the details of these elements covered in the previous section. The chassis is a cube, whereas the casters are spherical, as denoted by their <geometry> tags. Each link (or joint) has an origin (or pose), as well. Every element of that link or joint will have its own origin, which will be relative to the link's frame of reference.

For this base, the casters are included as part of the link for stability. There is no need for any additional links to define the casters, and therefore no joints to connect them. The casters do, however, have friction coefficients defined for them. These friction coefficients are set to 0, to allow for free motion while moving.

---

To generate the URDF file from the Xacro file, you must first define a parameter, robot_description. This parameter will set a single command to use the xacro package to generate the URDF from the xacro file.

The gazebo_ros package spawns the model from the URDF that robot_description helps generate.

---

List of ROS sensors:

http://wiki.ros.org/Sensors#A2D_range_finders

---

Basic intro to ros gazebo links, joints etc (urdf):

http://wiki.ros.org/urdf/Tutorials/Adding%20Physical%20and%20Collision%20Properties%20to%20a%20URDF%20Model

---

List of gazebo's models, meshes etc:

http://models.gazebosim.org/

---

good example of a fresh robot:

http://wiki.ros.org/urdf/Tutorials/Building%20a%20Visual%20Robot%20Model%20with%20URDF%20from%20Scratch

(mesh filename tag example)

---

src code for differential drive module (gazebo plugin used in this example):
https://bitbucket.org/osrf/gazebo/src/afe08834571835008fa7419f1feba5b7f89b9d62/plugins/DiffDrivePlugin.cc?at=gazebo7&fileviewer=file-view-default

looks like source code of gazebo 7.0 is also on bitbucket here:
https://bitbucket.org/osrf/gazebo/overview

---

You need to define the topics to which each sensor publishes.

For the wheel joints, it's the cmd_vel topic.

<commandTopic>cmd_vel</commandTopic>

For the camera, it's the rgb/image_raw topic.

<imageTopicName>rgb/image_raw</imageTopicName>

And for the lidar, it's the scan topic

<topicName>/scan</topicName>a

---

For rviz integration and fake data: (see robot_descriptor<..>.launch)

Those elements add two nodes - the joint_state_publisher and the robot_state_publisher.

joint_state_publisher: Publishes joint state messages for the robot, such as the angles for the non-fixed joints.

robot_state_publisher: Publishes the robot's state to tf (transform tree). Your robot model has several frames corresponding to each link/joint. The robot_state_publisher publishes the 3D poses of all of these links. This offers a convenient and efficient advantage, especially for more complicated robots.


---


send the following commands to move the robot in a circle (tested, works):

cd /home/workspace/catkin_ws/
$ source devel/setup.bash
$ rostopic pub /cmd_vel geometry_msgs/Twist  "linear:
  x: 0.1
  y: 0.0
  z: 0.0
angular:
  x: 0.0
  y: 0.0
  z: 0.1" 

Also saw camera images on rviz, but no lidar data.


---

Re: The new my_robot model already exits error/warning, that has started appearing the moment I saved a new orientation
of my world (even before launching the white ball in the house with my robot):

-> A very good read about robot launch error (set respawn to false) if textures are not loaded properly.
Doesn't mean that the spawn process has actually failed, as it says it exits cleanly. Also a good model here:

May also explain why my robot colors are not shown? 

https://answers.ros.org/question/271978/error-while-launching-robot-model/


---

conversion tips from urdf to sdf are explained here, including how to use gazebo tags for link color:

http://gazebosim.org/tutorials/?tut=ros_urdf

unless using OGRE definitions for my own colors, the standard gazebo colors available under material, are defined here:

https://bitbucket.org/osrf/gazebo/src/default/media/materials/scripts/gazebo.material?fileviewer=file-view-default

other material properties (SDF) are defined here:

http://sdformat.org/spec?ver=1.5&elem=visual


---


